#!/usr/bin/python
#
#

"""

	halostatcron.py -	cron job to collect stats into an rrd	^_^

"""


import time,math,os,rrdtool,string

import HaloRadio

rrddir = HaloRadio.conf['cron.rrd_data_dir']
pngdir = HaloRadio.conf['cron.png_dir']
rrdtoolpath = HaloRadio.conf['cron.rrdtool_path']

Time = int(time.time())
rrdfilename = "%s/halostat.rrd" % ( rrddir )
pngfileprefix= "%s/halostat-" % ( pngdir )

try:
	os.stat( rrdfilename )
except OSError:
	rrdtool.create( rrdfilename,
		"-b %d" % ( Time - 300 ),
		"-s 300",
		"DS:WebUsers:GAUGE:600:0:1024",
		"DS:Listeners:GAUGE:600:0:1024",
		"DS:QueueLen:GAUGE:600:0:10240",
		"RRA:AVERAGE:0.5:1:288",
		"RRA:AVERAGE:0.5:7:288",
		"RRA:MAX:0.5:7:288",
		"RRA:AVERAGE:0.5:31:288",
		"RRA:MAX:0.5:31:288",
		"RRA:AVERAGE:0.5:365:288",
		"RRA:MAX:0.5:365:288",
		)

import HaloRadio.SessionListMaker as SessionListMaker
slm = SessionListMaker.SessionListMaker()
slm.GetActive()
WebUsers = len(slm.list)

import HaloRadio.Util as Util
Listeners = Util.GetListeners()

import HaloRadio.RequestListMaker as RequestListMaker
rlm=RequestListMaker.RequestListMaker()
rlm.GetAll()
QueueLen=len(rlm.list)

try:
	rrdtool.update( rrdfilename,
		"%d:%d:%d:%d" %( Time, WebUsers, Listeners, QueueLen )
			)
except:
	print "ERR_RRD_UPDATE: %s"%( rrdfilename )



for (time, secs) in [('daily',86400),('weekly',604800),('monthly',2678400),('yearly',31536000)]:

	if time == "daily":
		comments = [
	"LINE3:WebUsers#00FF00:Active Users",
	"LINE2:Listeners#0000FF:Listeners",
	"LINE1:QueueLen#FF0000:QueueLen",
	"COMMENT:\\n",
	"GPRINT:MaxWebUsers:MAX:Active Users  Max=%2.0lf%s",
	"GPRINT:AvgWebUsers:AVERAGE:Avg=%2.2lf%s",
	"GPRINT:AvgWebUsers:LAST:Cur=%2.0lf%s",
	"COMMENT:\\n",
	"GPRINT:MaxListeners:MAX:Listeners  Max=%2.0lf%s",
	"GPRINT:AvgListeners:AVERAGE:Avg=%2.2lf%s",
	"GPRINT:AvgListeners:LAST:Cur=%2.0lf%s",
	"COMMENT:\\n",
	"GPRINT:MaxQueueLen:MAX:QueueLen  Max=%2.0lf%s",
	"GPRINT:AvgQueueLen:AVERAGE:Avg=%2.2lf%s",
	"GPRINT:AvgQueueLen:LAST:Cur=%2.0lf%s",
		]

	else:
		comments = [
	"LINE3:MaxWebUsers#00FF00:Max Active Users",
	"LINE2:MaxListeners#0000FF:Max Listeners",
	"LINE1:MaxQueueLen#FF0000:Max QueueLen\\n",
	"LINE3:WebUsers#33FF33:Avg Active Users",
	"LINE2:Listeners#3333FF:Avg Listeners",
	"LINE1:QueueLen#FF3333:Avg QueueLen",
	"COMMENT:\\n",
	"GPRINT:MaxWebUsers:MAX:Active Users  Max=%2.0lf%s",
	"GPRINT:AvgWebUsers:AVERAGE:Avg=%2.2lf%s",
	"COMMENT:\\n",
	"GPRINT:MaxListeners:MAX:Listeners  Max=%2.0lf%s",
	"GPRINT:AvgListeners:AVERAGE:Avg=%2.2lf%s",
	"COMMENT:\\n",
	"GPRINT:MaxQueueLen:MAX:QueueLen  Max=%2.0lf%s",
	"GPRINT:AvgQueueLen:AVERAGE:Avg=%2.2lf%s",
		]
	comments.append( "COMMENT:\\n")
	comments.append( "COMMENT:graph generated by halostatcron.py for halo_radio.\\n" )
	#print "%s-activity-%s.png"%(pngfileprefix,time)

	graphopts = [
	 "%s-activity-%s.png"%(pngfileprefix,time),
	"-t halo_radio %s activity"%(time),
	"-s -%d"%(secs),
	"-l 0",
	"--color=BACK#111100",
	"--color=SHADEA#171700",
	"--color=SHADEB#040400",
	"--color=FONT#808010",
	"--color=CANVAS#080800",
	"--color=GRID#333333",
	"--color=MGRID#555555",
	"--color=FRAME#171700",
	"--color=ARROW#171700",
	#"--lazy",
	"--lower-limit=.1",
	"--logarithmic",
	"DEF:WebUsers=%s:WebUsers:%s" % (rrdfilename, 'AVERAGE'),
	"DEF:Listeners=%s:Listeners:%s" % (rrdfilename, 'AVERAGE'),
	"DEF:QueueLen=%s:QueueLen:%s" % (rrdfilename, 'AVERAGE'),
	"DEF:AvgWebUsers=%s:WebUsers:%s" % (rrdfilename, 'AVERAGE' ),
	"DEF:AvgListeners=%s:Listeners:%s" % (rrdfilename, 'AVERAGE' ),
	"DEF:AvgQueueLen=%s:QueueLen:%s" % (rrdfilename, 'AVERAGE' ),
	"DEF:MaxWebUsers=%s:WebUsers:%s" % (rrdfilename, 'MAX' ),
	"DEF:MaxListeners=%s:Listeners:%s" % (rrdfilename, 'MAX' ),
	"DEF:MaxQueueLen=%s:QueueLen:%s" % (rrdfilename, 'MAX' ),
		]
	for option in comments:
		graphopts.append(option)
	os.system("%s graph \"%s\" >/dev/null" %(rrdtoolpath, string.join(graphopts, "\" \"")) )

